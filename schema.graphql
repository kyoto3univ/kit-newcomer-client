schema {
  query: QueryRoot
  mutation: MutationRoot
}

# Directs the executor to query only when the field exists.
directive @ifdef on FIELD

type Asset {
  id: StringNumber!
  ownerId: StringNumber!
  clubId: String!
  name: String!
  alternativeDescription: String
  filePath: String!
  fileSize: Int!
  imageWidth: Int
  imageHeight: Int
}

type AssetPaging {
  items: [Asset!]!
  count: Int!
}

enum ClubEditLevel {
  EDITOR
  OWNER
}

enum ClubModerationState {
  NOT_ACCEPTED
  WAITING
  REJECTED
  ACCEPTED
}

type ClubPaging {
  items: [ClubWithMembers!]!
  count: Int!
}

enum ClubTopImageType {
  IMAGE
  YOU_TUBE
}

type ClubWithLevelItem {
  level: ClubEditLevel!
  club: ClubWithMembers!
}

type ClubWithMembers {
  id: String!
  name: String!
  isPublished: Boolean!
  moderationState: ClubModerationState!
  shortDescription: String
  longDescription: String
  joinDescription: String
  place: String
  schedule: String
  videoUrl: String
  contactUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  topContentType: ClubTopImageType!
  members: [ClubWithMembersItem!]!
  topImage: Asset
  thumbImage: Asset
}

type ClubWithMembersItem {
  level: ClubEditLevel!
  user: User!
}

# Implement the DateTime<Local> scalar
#
# The input/output is a string in RFC3339 format.
scalar DateTime

type MutationRoot {
  uploadAssetFor(clubId: String!, upload: Upload!): Asset!
  updateAsset(assetId: StringNumber!, update: UpdateAssetDto!): Asset!
  updateUserPermission(
    userId: StringNumber!
    permission: UserPermission!
  ): User!
  createNewClub(name: String!): ClubWithMembers!
  updateClub(id: String!, update: UpdateClubDto!): ClubWithMembers!
  changePublishState(id: String!, isPublished: Boolean!): ClubWithMembers!
  changeModerationState(
    id: String!
    moderationState: ClubModerationState!
  ): ClubWithMembers!
  addMemberToClub(
    clubId: String!
    userId: StringNumber!
    level: ClubEditLevel
  ): ClubWithMembers!
  deleteMemberFromClub(clubId: String!, userId: StringNumber!): ClubWithMembers!
  getAuthorizeInfo: TwitterAuthenticationResponse!
  getBearerFromRequestToken(request: TwitterLoginInput!): TwitterLoginResponse!
}

type QueryRoot {
  getAssetsFromClub(clubId: String!, offset: Int, limit: Int): AssetPaging!
  getMyClubs: [ClubWithLevelItem!]!
  getClubs(
    offset: Int
    limit: Int
    includeUnpublished: Boolean
    moderationState: ClubModerationState
  ): ClubPaging!
  club(id: String!): ClubWithMembers!
  me: User!
  getUsers(
    offset: Int
    limit: Int
    leastPermission: UserPermission
    screenName: String
  ): UserPaging!
}

scalar StringNumber

type TwitterAuthenticationResponse {
  requestToken: String!
  requestTokenSecret: String!
  callbackUrl: String!
}

input TwitterLoginInput {
  requestToken: String!
  requestTokenSecret: String!
  verifier: String!
}

type TwitterLoginResponse {
  bearerToken: String!
  userId: String!
  user: User!
}

input UpdateAssetDto {
  alternativeDescription: String
}

input UpdateClubDto {
  name: String
  shortDescription: String
  longDescription: String
  joinDescription: String
  place: String
  schedule: String
  videoUrl: String
  contactUrl: String
  topContentType: ClubTopImageType
  topImageId: StringNumber
  thumbImageId: StringNumber
}

scalar Upload

type User {
  id: StringNumber!
  name: String!
  screenName: String!
  icon: String
  permission: UserPermission!
}

type UserPaging {
  items: [User!]!
  count: Int!
}

enum UserPermission {
  NEWCOMER_OR_NONE
  CLUB_MEMBER
  MODERATOR
  ADMIN
}
